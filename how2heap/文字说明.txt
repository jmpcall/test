演示程序仅仅用于描述攻击的关键步骤，其中执行的所有操作，在实际攻击中，都要通过程序的本地/远程交互逻辑触发:
1. 交互可以访问并显示的范围通常有限，甚至依赖信息泄漏漏洞；
2. 交互可以向程序写入的范围通常有限，甚至依赖写溢出漏洞；
3. 交互通常不能轻易控制分配、释放的时机，以及分配内存的大小。

不过话说回来，只有透彻理解最基本的原型，才能从极其复杂的真实程序中，隐隐约约的发现它们，并且游刃有余的实现攻击。
就跟下棋一样，不懂招数，看到的整盘棋都是零散的，反之每个阶段围绕一个战略目标，就可以分而治之，只需要应付每个较小范围里的变数。




malloc.c

ptmalloc角色介绍: 可执行程序 -> libc动态库 -> 内核 -> 硬件
优先级: tcache > fastbin > unsorted bin > bin (small,large) > top chunk > mmap()
bins: https://bbs.kanxue.com/thread-271331.htm
thread arena: https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/
tcache使用tcache_entry结果，连接chunk，fastbin直接使用chunk->fd

tcache:              glibc-2.26
tcache,key:          glibc-2.28
指针加密:            glibc-2.32
tcache,random key:   glibc-2.34




// 基本招式
壁虎的尾巴 (弃旧长新)
 |- unsorted_bin_attack (glibc-2.27), unsorted_bin_into_stack (glibc-2.23)
 |- house_of_lore (glibc-2.34)
 |- large_bin_attack (glibc-2.34)
 |- tcache_poisoning (glibc-2.34)
 |- fastbin_dup_into_stack (glibc-2.23)
 |- house_of_storm (glibc-2.27) (unsorted_bin_into_stack + large_bin_attack)

tcache & fastbin，知多少
 |  // 加密指针，fastbin同理，但是由fd直接连接，不使用entry
 |- decrypt_safe_linking (glibc-2.34)
 |  // smallbin -> tcache
 |- tcache_stashing_unlink_attack (glibc-2.34) (绕过smallbin取出chunk检查)
 |- fastbin_reverse_into_tcache (glibc-2.34)   (倒灌)
 |  // 绕过double free检查
 |- fastbin_dup_consolidate (glibc-2.23)
 |- fastbin_dup (glibc-2.34)

扩大控制范围
 |- house_of_spirit (glibc-2.23)        (检查: 2*SIZE_SZ < nextchunk->size <= av->system_mem)
 |- tcache_house_of_spirit (glibc-2.34) (不用检查nextchunk->size)

// 修改chunk->size
prev_chunk转移
 |- unsafe_unlink (glibc-2.34)    (改写目标位置)
 |- poison_null_byte (glibc-2.34) (释放目标位置，前面部分利用正常的分配、释放large chunk，隐式填写chunk(prev)->fd、bk，以及chunk(b)->fb)
next_chunk转移
 |- overlapping_chunks (glibc-2.34)
 |- overlapping_chunks_2 (glibc-2.23)
 |- house_of_botcake (glibc-2.34)
 |- house_of_einherjar (glibc-2.34) (house_of_botcake + tcache_poisoning)
虚胖吧，top_chunk
 |- house_of_force (glibc-2.27)
释放吧，top_chunk (上车_IO_list_all)
 |- house_of_orange (glibc-2.23)    (橙子)
 |- house_of_tangerine (glibc-2.39) (橘子)

// 偷梁换柱 (控制libc变量)
arena转移
 |- house_of_gods (glibc-2.24)
 |- house_of_mind_fastbin (glibc-2.34)
hook system()
 |- house_of_roman (glibc-2.23)
 |- house_of_water (glibc-2.36) (倒没有篡改libc变量，不过有一点和house_of_roman相似，也构造了一个地址不是按2*SIZE_SZ字节对齐的chunk)




1.  unsorted_bin_attack (glibc-2.27)
将chunk(p)释放到unsorted bin，然后利用漏洞修改chunk(p)->bk (比如UAF漏洞，因为chunk(p)当前为释放状态)，使其指向fake_chunk，就将fake_chunk也链入unsorted bin了
细节: 
chunk(p)被malloc(0x410)分配到了:
  chunk(p)没有移入其它bin，所以fd保持不变
  停止遍历unsorted_bin，从而fake_chunk仍然停留在unsorted bin
  unsorted_bin->fd，仍然指向chunk(p)，fake_chunk->fd，指向了unsorted_bin (libc实质上仅使用bk指针，管理unsorted_bin链表，见: unsorted_bin-rm_chunk.png)
unsorted_bin特性: FIFO、不按大小排序

2.  unsorted_bin_into_stack (glibc-2.23)
和unsorted_bin_attack.c相比，在执行malloc()之前，将chunk(victim)的大小改掉了，使其不满足malloc(0x100)的要求，从而使其移入smallbin[0]，然后继续遍历，最终取出fake_chunk
作用:
  使目标位置可以被malloc()分配到
  可以在目标位置，写入unsorted_bin地址

3.  house_of_lore (glibc-2.34)
修改chunk->bk指针，也可以将fake_chunk，添加到smallbin
和unsorted_bin的区别是，malloc(0x100)取到所需chunk后，会继续遍历smallbin，将后续chunk移入tcache，直到tcache填满为止

4.  large_bin_attack (glibc-2.34)
修改chunk->bk指针，也可以将fake_chunk，添加到largebin
演示程序过程: 
  chunk(p1)添加到large_bin[0]，修改chunk(p1)->bk，使其指向&target-4，即fake_chunk，再触发chunk(p2)移入large_bin[0]，添加到它们之间时，fake_chunk->fd_nextsize，即target值，就会被写为chunk(p2)
largebin特性: 按大小排序、不同大小的chunk组通过fd_nextsize、bd_nextsize连接

5.  tcache_poisoning (glibc-2.34)
tcache中的chunk (tcache_entry)，通过fd指针相连 (tcache_entry->next)，修改fd值，可以将fake_chunk，添加到tcache链表

6.  fastbin_dup_into_stack (glibc-2.23)
fastbin中的chunk，通过fd指针相连，修改fd值，可以将fake_chunk，添加到fastbin链表
演示程序，还先展示了如何绕过fastbin的double free检测:
  向fastbin添加chunk之前，只会检查链表头是否为要添加的chunk，不会检查整个链表 (见: double_free_check.png)
double free可以转换为UAF进行利用:
  chunk(a)一边链接在fastbin中，一边又被malloc()分配出去了，这样，程序就可以通过合法分配到的内存，改写释放状态的内存，更加接近实际的攻击

7.  house_of_storm (glibc-2.27)
先忽略138行之前的代码:
  142~154：填满tcache[21] (个人认为这一步没什么必要，感兴趣可以实验一下)
  159~169: 将large_chunk，释放到largebin[2]，将unsorted_chunk，释放到unsorted_bin
  204:     修改unsorted_chunk->bk，将fake_chunk链入unsorted_bin
  207,245：修改large_chunk->bk、large_chunk->bk_nextsize，使得unsorted_chunk移入large_bin[2]时，fake_chunk+8-shift_amoutn处，写入unsorted_chunk地址
  73~138:  此时回头去看前面的代码，就是在为unsorted_chunk地址的写入位置，计算微调偏移，使得0x173，正好写入fake_chunk+8处，保证fake_chunk->size满足calloc()执行过程中的检查 (见: malloc-check.png)

8.  decrypt_safe_linking (glibc-2.34)
node:     A15A14A13A12A11A10A9A8A7A6A5A4A3A2A1A0
nextnode: B15B14B13B12B11B10B9B8B7B6B5B4B3B2B1B0
如果node和nextnode在同一个4K page，则仅低12位不相等，即：
node地址也可以表示为：B15B14B13B12B11B10B9B8B7B6B5B4B3A2A1A0
加密指针：C15C14C13C12C11C10C9C8C7C6C5C4C3C2C1C0
加密指针 = node>>12 ^ nextnode
=> C15C14C13 = B15B14B13
=> C12C11C10 = B15B14B13 ^ B12B11B10
=> B12B11B10 = B15B14B13 ^ C12C11C10
同理可求：B9B8B7、B6B5B4、B3B2B1、B0，也就是说，仅通过加密指针本身，就可以还原出nextnode地址

9.  tcache_stashing_unlink_attack (glibc-2.34)
如果没有tcache，或已满:
  从smallbin取出的每个chunk，都要检查chunk->bk->fd == chunk
如果有tcache，且未满:
  从smallbin取出chunk，只会对第一个取出chunk进行检查，后续chunk会移入tcache，并且不做检查
  从tcache分配，也不检查chunk->bk->fd == chunk，最终绕过这个检查

10. fastbin_reverse_into_tcache (glibc-2.34)
fastbin FILO，tcache FILO，fastbin中的chunks移入tcache后，顺序会颠倒:
最先从fastbin移出的chunk，也会最先移入tcache，那么在tcache中，就会最后才能被取出

12. fastbin_dup (glibc-2.34)
1. 向fastbin添加chunk之前，只会检查链表头是否为要添加的chunk，不会检查整个链表 (见: double_free_check.png)；
   否则严重影响释放效率
2. malloc()优先从tcache获取chunk (见: __libc_malloc.png)，calloc()直接从top chunk分配chunk (见: __libc_calloc.png)；
   演示程序，也可以先malloc(a,b,c)，再填充tcache
3. tcache比fastbin优先级高，所以要保证对应tcache是满的，再释放的chunk才会添加到fastbin；
   tcache使用tcache_entry对象，连接chunk，fastbin直接使用chunk->fd
4. calloc()会对分配内存清零 (见: calloc-memset.png)。(42: chunk(a)->fd = NULL)

11. fastbin_dup_consolidate (glibc-2.23)
绕过double free检测，也是先挤出fastbin链表头(最新添加位置)，只不过是挤到unsorted_bin

13. house_of_spirit (glibc-2.23)
目标位置周围内存内容可控，可以写入、释放、分配，就可以控制整个目标区域。
https://colorlight.github.io/2021/06/17/%E5%A0%86%E5%88%A9%E7%94%A8%E7%B3%BB%E5%88%97%E5%85%AB%EF%BC%9A%C2%96House-of-Spirit

14. tcache_house_of_spirit (glibc-2.34)
相比释放到fastbin，释放到tcache，不用检查nextchunk->size

15. unsafe_unlink (glibc-2.34)
1. 在chunk0_ptr位置(属于程序可用区域)，构造一个fake_chunk，并保证：
   fake_chunk->fd->bk = &chunk0_ptr
   fake_chunk->bk->fd = &chunk0_ptr
   使得unlink()时，不会向一个不可写的位置写入内容 (unlink(fake_chunk)最终会在&chunk0_ptr处，写入&chunk0_ptr-3)
2. 利用漏洞，向chunk1_ptr->prev_size处，写入0x420
   free(chunk1_ptr)时，就会认为fake_chunk是它的prev_chunk，并且状态为free，所以就会触发合并，合并前先会unlink(fake_chunk)

16. poison_null_byte (glibc-2.34)
chunk在bins中移入、移出，会修改fd、bk、fd_nextsize、bk_nextsize值，如果不方便获取一些chunk运行时的地址，或者通过程序交互，可写入的范围有限
演示程序利用这一点，设置了chunk(prev)->fd_nextsize、bk_nextsize，以及chunk(b)->fd
剩余部分同unsafe_unlink

17. overlapping_chunks (glibc-2.34)
利用漏洞，增加chunk(p2)->size
扩大后的p2再被分配后，不再依赖溢出漏洞，就可以向chunk(p3)区域写入数据

18. overlapping_chunks_2 (glibc-2.23)
利用漏洞，修改chunk(p2)->size
free(p2)时，还会与释放状态的next_chunk，即chunk(p4)合并

19. house_of_botcake (glibc-2.34)
chunk(prev)和chunk(a)已经释放合并，程序仍在将a当作分配内存使用，比如用于存储一些函数指针，那么利用程序，就有机会控制prev再次被分配出去，并向让函数指针指向shellcode地址

20. house_of_einherjar (glibc-2.34)
house_of_botcake + tcache_poisoning

21. house_of_force (glibc-2.27)
利用漏洞，改写top_chunk->size为最大值，然后分配超级大的区间，就可以让top_chunk"绕一圈"，退回到低地址位置
精确设计分配大小，就可以控制top_chunk正好落在bss_var变量所在位置，后续就可以把该位置，分配给程序

22. house_of_orange (glibc-2.23)
75,76:   利用漏洞，将top_chunk->size改为较小的值
122:     再去分配一个大于top_chunk->size，小于32M(避免直接使用mmap())的区间，就会触发top chunk扩展 (brk = (char*)(MORECORE(size)))
         随着top_chunk->size的改小，old_end的计算结果也会上移，就会误导malloc()执行_int_free(old_top)，将old_top释放到unsorted_bin (通常在扩展非主分配区的top_chunk时，才会这样)
158:     此时top->fd = unsorted_bin，给它加上0x9a8偏移，就可以得到_IO_list_all变量地址
175:     修改top->bk，准备unsorted_bin_attack
182:     准备system()参数
214:     设置top->size = 0x61，使top从unsorted_bin移出后，移入的是smallbin[4]
225~153: 构造_IO_FILE_plus对象
257:     从unsorted_bin遍历到fake_chunk时，发现其size<MINSIZE，触发abort()，进一步触发_IO_flush_all_lockp()，
         此时前面构造的fp，已经位于_IO_list_all->file._chain上，并且符合__overflow()执行条件
         __overflow已经在前面被设置为winner()，并且接收fp参数，winner()内部执行了system()函数，并传递fp指向的"/bin/bash"参数值

23. house_of_tangerine (glibc-2.39)
也是触发top_chunk释放，但是是释放到tcache，并且释放了2次，为了后续满足tcache count检查
再通过tcache_poisoning，将fake_chunk添加到tcache，后续就可以分配到了

24. house_of_gods (glibc-2.24)
https://github.com/Milo-D/house-of-gods/blob/master/rev2/HOUSE_OF_GODS.TXT
112,119: 将SC释放到unsorted_bin，获取unsorted_bin地址
130:     触发SC移入smallbin[7]，使binmap第9位置1(binat(9))，即0x200，后续作为binmap-chunk的size
         单线程程序，只有一个arena，所以main_arena的next指向自己，后续作为binmap-chunk的bk
155~171: 再利用unsorted_bin_attack方法，将binmap-chunk添加到unsorted_bin (binmap-chunk相对unsorted_bin，偏移0x7f8)
199:     FAST40_CHUNK->bk = INIM_CHUNK
204,209: &main_arena为binmap-chunk->bk，设置其size,bk (2*SIZE_SZ < size <= av->system_mem)
223:     遍历unsorted_bin，直到取出binmap-chunk
272:     将&narenas-0x10处视为chunk，链入unsortd_bin
281:     修改main_arena->system_mem = 0xffffffffffffffff
296:     遍历unsorted_bin，直到取出INTM_CHUNK，使得unsorted_bin地址，写入narenas变量，使其大于1
314:     binmap-chunk已经分配给程序了，可以利用交互，在其bk位置(同时也是main_arena->next位置)，写入fake_arena地址
324,331: 触发2次reused_arena()，使thread_arena指向fake_arena
341~361: 后续的分配，就会使用thread_arena指向的伪造分配区

25. house_of_mind_fastbin (glibc-2.34)
122~144: 构造fake_arena、fake_heap_info (两者位置关系：https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/)
146~162: 在高于fake_heap_info，且离它不远的位置，分配fastbin_chunk
167~173: 填满tcache，使后续释放fastbin_chunk时，移入fastbinsY[4]
191:     设置fake_heap_info->arena
208,230: 修改chunk_ptr->size标志位，欺骗libc，认为chunk_ptr是非主分配区分配的，就会向下64M对齐找sub_heap，进一步找到所属arena，最终释放到fake_arena的fastbin

26. house_of_roman (glibc-2.23)
122~143: 构造一个size=0x71，并且fd指向bins区域的chunk (先满足fd=&smallbin[7]，再通过切割，满足size=0x71)
         直接分配释放0x70大小的chunk，会链入fastbin链表，不能控制fd指向bins区域
149~201: victim_chunk->fd = main_arena_chunk (top_chunk起始位置+0x70+0x90)
246~252：控制main_arena_chunk->fd指向，使其size=0x7f (__memalign_hook变量下方是severity_list变量(0x00007f...)，并且当中空了8字节(0x0)，见：__malloc_hook.png、severity_list.png)
260~266: 将__malloc_hook_adjust指向的chunk分配给程序，用于后续控制__malloc_hook的值
312~335: 利用unsorted_bin_attack，设置__malloc_hook = unsorted_bin
357~383：通过交互，覆盖__malloc_hook低字节，修改为system函数地址
392:     执行malloc()，触发__malloc_hook，即system()执行

27. house_of_water (glibc-2.36)
58:      程序首次执行malloc()，会触发init()，先分配一个tcache
63:      free(fake_size_lsb)，会将fake_size_lsb添加到tcache->entries[60]，且tcache->counts[60] += 1
64:      free(fake_size_msb)，会将fake_size_lsb添加到tcache->entries[61]，且tcache->counts[61] += 1
68:      由于tcache是从top chunk起始位置分配的，按页对齐，所以fake_size_lsb低12位清零，就会到达tcache位置
211,225: 再将chunk(unsorted_start)释放到tcache->entries[1] (释放过程中，会将fd位置设置为tcache_key，所以需要恢复)
240~253：再将chunk(unsorted_end)释放到tcache->entries[0] (释放过程中，会将fd位置设置为tcache_key，所以需要恢复)
         此时，就伪造出来一个fake_chunk，fd、bk分配指向..，并且满足：2*SIZE_SZ < size <= av->system_mem
267~343: 再将start、middle、end释放到unsorted bin，修改start->fd、end->bk，即可将middle替换为fake_chunk，后续可以分配给程序

